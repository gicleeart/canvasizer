name: Artwork to AR (GLB + USDZ)

on:
  workflow_dispatch:
    inputs:
      image_url:
        description: 'Direct URL to the artwork image (JPG/PNG)'
        required: true
        type: string
      width_m:
        description: 'Physical width in meters'
        required: true
        type: string
      height_m:
        description: 'Physical height in meters'
        required: true
        type: string

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Blender
        run: brew install --cask blender

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.inputs.image_url }}" -o assets/artwork.png

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy, os, sys

          # ---- Inputs from workflow_dispatch ----
          width_m = float("${{ github.event.inputs.width_m }}")
          height_m = float("${{ github.event.inputs.height_m }}")
          img_path = os.path.abspath("assets/artwork.png")

          # Reset Blender
          bpy.ops.wm.read_factory_settings(use_empty=True)

          # Create a plane with real-world dimensions
          bpy.ops.mesh.primitive_plane_add(size=1.0, location=(0,0,0))
          plane = bpy.context.active_object
          plane.scale[0] = width_m / 2
          plane.scale[1] = height_m / 2

          # Create material
          mat = bpy.data.materials.new(name="ArtworkMat")
          mat.use_nodes = True
          bsdf = mat.node_tree.nodes["Principled BSDF"]

          tex_img = mat.node_tree.nodes.new("ShaderNodeTexImage")
          img = bpy.data.images.load(img_path)
          tex_img.image = img

          mat.node_tree.links.new(bsdf.inputs['Base Color'], tex_img.outputs['Color'])

          # Assign material to plane
          if plane.data.materials:
              plane.data.materials[0] = mat
          else:
              plane.data.materials.append(mat)

          # Set UVs to match image
          bpy.ops.object.mode_set(mode='EDIT')
          bpy.ops.uv.smart_project()
          bpy.ops.object.mode_set(mode='OBJECT')

          os.makedirs("output", exist_ok=True)

          # Export GLB
          bpy.ops.export_scene.gltf(
              filepath="output/artwork.glb",
              export_format='GLB',
              export_apply=True
          )

          # Export USDZ
          bpy.ops.export_scene.usd(
              filepath="output/artwork.usdz",
              export_format='USDZ'
          )

          print("âœ… Export complete: GLB + USDZ in output/")
          PY

      - name: Run Blender headless
        run: /Applications/Blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: output/*
