name: Artwork to AR (GLB + USDZ)

on:
  repository_dispatch:
    types: [canvasizer_trigger]

permissions:
  contents: write  # allow pushes to main

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Blender
        uses: actions/cache@v3
        with:
          path: blender
          key: blender-macos-3.6.5  # or whatever version you're using

      - name: Download Blender manually (if not cached)
        run: |
          mkdir -p blender
          if [ ! -f blender/blender.app/Contents/MacOS/Blender ]; then
            echo "‚¨áÔ∏è Downloading Blender..."
            curl -L https://mirror.clarkson.edu/blender/release/Blender3.6/blender-3.6.5-macos-x64.dmg -o blender/blender.dmg
            hdiutil attach blender/blender.dmg -mountpoint /Volumes/Blender
            cp -R "/Volumes/Blender/Blender.app" blender/
            hdiutil detach /Volumes/Blender
          else
            echo "‚úÖ Blender already cached"
          fi

      - name: Cache USD repo
        uses: actions/cache@v3
        with:
          path: USD
          key: usd-repo-${{ runner.os }}-${{ hashFiles('USD/.git/HEAD') }}
          restore-keys: |
            usd-repo-${{ runner.os }}-
      
      - name: Clone USD (shallow if missing)
        run: |
          if [ ! -d "USD" ]; then
            git clone --depth 1 https://github.com/PixarAnimationStudios/USD.git
          fi
      
      - name: Cache USD build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/usd-tools
          key: usd-build-${{ runner.os }}-${{ hashFiles('USD/build_scripts/build_usd.py') }}
          restore-keys: |
            usd-build-${{ runner.os }}-
      
      - name: Build USD tools (skip if already built)
        run: |
          if [ -f "${{ github.workspace }}/usd-tools/bin/usdzip" ]; then
            echo "‚úÖ USD tools already built ‚Äî skipping build"
          else
            cd USD
            python build_scripts/build_usd.py ${{ github.workspace }}/usd-tools --no-usdview --no-tests --no-imaging
          fi

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.client_payload.image_url }}" -o assets/artwork.png

      - name: Preflight debug
        run: |
          set -euxo pipefail
          pwd
          ls -la
          echo "Tree before conversion:"
          find . -maxdepth 3 -type f

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy
          import os
          import math

          # === 1. SETUP ===
          img_path = os.environ["ARIP_IMAGE_PATH"]
          out_glb  = os.environ["ARIP_OUT_GLB"]
          out_usdz = os.environ["ARIP_OUT_USDZ"]

          os.makedirs(os.path.dirname(out_glb), exist_ok=True)
          os.makedirs(os.path.dirname(out_usdz), exist_ok=True)

          bpy.ops.wm.read_factory_settings(use_empty=True)

          # === 2. CREATE GEOMETRY & LOAD IMAGE ===
          width_m = 1.50
          depth_m = 0.02

          # Load the image using the full, absolute path provided. This is reliable.
          img = bpy.data.images.load(img_path)
          img.colorspace_settings.name = "sRGB"

          aspect_ratio = (img.size[0] / img.size[1]) if img.size[1] > 0 else 1.0
          height_m = width_m / aspect_ratio

          # This plane is created with a perfect 0-1 UV map by default. We'll rely on this.
          bpy.ops.mesh.primitive_plane_add(size=1.0, enter_editmode=False, location=(0, 0, 0))
          panel = bpy.context.active_object
          panel.name = "ArtPanel"

          # Give the panel thickness
          mod = panel.modifiers.new(name="Solidify", type='SOLIDIFY')
          mod.thickness = depth_m
          mod.offset = 1.0
          bpy.ops.object.modifier_apply(modifier=mod.name)

          # Scale and rotate into position
          panel.scale = (width_m / 2.0, height_m / 2.0, 1.0)
          bpy.ops.object.transform_apply(scale=True)
          panel.rotation_euler[0] = math.radians(90)
          bpy.ops.object.transform_apply(rotation=True)

          # === 3. ROBUST MATERIAL SETUP ===
          mesh = panel.data
          
          # Get the name of the default UV map created with the plane
          uv_layer_name = mesh.uv_layers.active.name

          # Create the artwork material
          mat_front = bpy.data.materials.new("ArtworkMaterial")
          mat_front.use_nodes = True
          nodes = mat_front.node_tree.nodes
          bsdf_front = nodes.get("Principled BSDF")
          tex_node = nodes.new("ShaderNodeTexImage")
          tex_node.image = img
          
          # Explicitly connect the UV map to the texture for the USDZ exporter
          uv_map_node = nodes.new(type='ShaderNodeUVMap')
          uv_map_node.uv_map = uv_layer_name
          mat_front.node_tree.links.new(uv_map_node.outputs['UV'], tex_node.inputs['Vector'])
          mat_front.node_tree.links.new(tex_node.outputs['Color'], bsdf_front.inputs['Base Color'])
          bsdf_front.inputs["Roughness"].default_value = 0.8
          
          # Create the material for the sides/back
          mat_side = bpy.data.materials.new("SideMaterial")
          mat_side.use_nodes = True
          bsdf_side = mat_side.node_tree.nodes.get("Principled BSDF")
          bsdf_side.inputs["Base Color"].default_value = (0.9, 0.9, 0.9, 1.0)
          bsdf_side.inputs["Roughness"].default_value = 0.9

          # Assign materials to faces
          mesh.materials.append(mat_front) # Slot 0
          mesh.materials.append(mat_side)  # Slot 1

          for poly in mesh.polygons:
              poly.material_index = 1
              
          front_face = max([p for p in mesh.polygons], key=lambda p: p.normal.y)
          front_face.material_index = 0

          # === 4. UNIFIED EXPORT LOGIC ===
          bpy.ops.object.select_all(action='DESELECT')
          panel.select_set(True)
          bpy.context.view_layer.objects.active = panel

          print(f"üì¶ Exporting GLB to {out_glb}...")
          bpy.ops.export_scene.gltf(
              filepath=out_glb,
              export_format='GLB',
              use_selection=True,
              export_yup=True
          )
          print("‚úÖ GLB export complete.")

          print(f"üì¶ Exporting USDZ to {out_usdz}...")
          bpy.ops.wm.usd_export(
              filepath=out_usdz,
              selected_objects_only=True,
              export_textures=True
          )
          print("‚úÖ USDZ export complete.")

          PY

      - name: Run Blender headless
        env:
          ARIP_IMAGE_PATH: ${{ github.workspace }}/assets/artwork.png
          ARIP_OUT_GLB:   ${{ github.workspace }}/output/artwork.glb
          ARIP_OUT_USDZ:  ${{ github.workspace }}/output/artwork.usdz
        run: blender/blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      - name: Inspect post‚ÄëBlender output
        run: |
          set -euxo pipefail
          echo "Tree after Blender:"
          find . -maxdepth 4 -type f

      - name: Normalize and stage artifacts
        run: |
          set -euxo pipefail
          mkdir -p public_models
          shopt -s nullglob nocaseglob
          files=(output/*.{glb,usdz})
          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ùå No 3D model files produced ‚Äî aborting"
            exit 1
          fi
          for f in "${files[@]}"; do
            base=$(basename "$f")
            lower=$(echo "$base" | tr '[:upper:]' '[:lower:]')
            cp -v "$f" "public_models/$lower"
          done
          ls -la public_models

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: public_models/*

      - name: Commit artifacts to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public_models
          git commit -m "Add AR models for ${{ github.event.client_payload.title }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: POST back to WordPress (after HEAD check)
        env:
          WP_WEBHOOK_URL: ${{ secrets.WP_WEBHOOK_URL }}
          WP_WEBHOOK_TOKEN: ${{ secrets.WP_WEBHOOK_TOKEN }}
        run: |
          GLB_PATH="public_models/artwork.glb"
          USDZ_PATH="public_models/artwork.usdz"

          GLB_URL=""
          USDZ_URL=""

          if [ -f "$GLB_PATH" ]; then
            GLB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$GLB_PATH"
          fi
          if [ -f "$USDZ_PATH" ]; then
            USDZ_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$USDZ_PATH"
          fi

          echo "Will POST with:"
          echo "GLB: $GLB_URL"
          echo "USDZ: $USDZ_URL"

          # Wait until at least the GLB is live on GitHub's raw CDN
          # Max 30s, check every 3s
          for i in {1..10}; do
            if curl -s -I "$GLB_URL" | grep -q "200 OK"; then
              echo "‚úÖ GLB is live"
              break
            fi
            echo "‚è≥ Waiting for GLB to propagate..."
            sleep 3
          done

          # Optional: also wait for USDZ if present
          if [ -n "$USDZ_URL" ]; then
            for i in {1..10}; do
              if curl -s -I "$USDZ_URL" | grep -q "200 OK"; then
                echo "‚úÖ USDZ is live"
                break
              fi
              echo "‚è≥ Waiting for USDZ to propagate..."
              sleep 3
            done
          fi

          echo "POSTing to: $WP_WEBHOOK_URL"

          jq -n \
            --arg post_id  "${{ github.event.client_payload.post_id }}" \
            --arg title    "${{ github.event.client_payload.title }}" \
            --arg image    "${{ github.event.client_payload.image_url }}" \
            --arg glb      "$GLB_URL" \
            --arg usdz     "$USDZ_URL" \
            '{post_id:$post_id, title:$title, image_url:$image, glb_url:$glb, usdz_url:$usdz}' \
          | curl -v -X POST "$WP_WEBHOOK_URL" \
              -H "Authorization: Bearer $WP_WEBHOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @-
