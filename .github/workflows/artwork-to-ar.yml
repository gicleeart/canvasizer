name: Artwork to AR (GLB + USDZ)

on:
  repository_dispatch:
    types: [canvasizer_trigger]

permissions:
  contents: write  # allow pushes to main

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Blender
        run: brew install --cask blender

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.client_payload.image_url }}" -o assets/artwork.png

      - name: Preflight debug
        run: |
          set -euxo pipefail
          pwd
          ls -la
          echo "Tree before conversion:"
          find . -maxdepth 3 -type f

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy
          import bmesh
          
          # === CONFIG ===
          image_path = "/path/to/your/image.jpg"  # Replace with actual path
          if not os.path.exists(img_path):
              raise FileNotFoundError(f"Image not found: {img_path}")

          panel_thickness = 0.02  # Thickness in meters
          
          # === CLEANUP ===
          bpy.ops.object.select_all(action='DESELECT')
          for obj in bpy.data.objects:
              obj.select_set(True)
          bpy.ops.object.delete()
          
          # === LOAD IMAGE ===
          img = bpy.data.images.load(image_path)
          
          # === GET IMAGE DIMENSIONS ===
          width, height = img.size
          aspect_ratio = width / height
          
          # === CREATE PANEL ===
          bpy.ops.mesh.primitive_cube_add(size=1)
          panel = bpy.context.active_object
          panel.name = "CanvasPanel"
          
          # Scale to match aspect ratio and thickness
          panel.scale.x = 0.5
          panel.scale.y = panel_thickness / 2
          panel.scale.z = 0.5 / aspect_ratio
          
          # Apply transforms
          bpy.ops.object.transform_apply(location=False, rotation=False, scale=True)
          
          # === ROTATE PANEL UPRIGHT ===
          panel.rotation_euler[0] = -1.5708  # Rotate -90° around X to stand upright
          bpy.ops.object.transform_apply(location=False, rotation=True, scale=False)
          
          # === RECALCULATE NORMALS ===
          bpy.ops.object.mode_set(mode='EDIT')
          bpy.ops.mesh.normals_make_consistent(inside=False)
          bpy.ops.object.mode_set(mode='OBJECT')
          
          # === DETECT FRONT FACE (+Y NORMAL) ===
          mesh = panel.data
          candidates = [p for p in mesh.polygons if round(p.normal.y, 3) == 1.0]
          front_face = max(candidates, key=lambda p: p.area) if candidates else max(mesh.polygons, key=lambda p: p.center.y)
          
          # === CREATE UV MAP ===
          if not mesh.uv_layers:
              mesh.uv_layers.new(name="UVMap")
          uv_layer = mesh.uv_layers.active.data
          
          # Map image onto front face using X and Z
          verts = panel.data.vertices
          xs, zs = [], []
          for loop_index in front_face.loop_indices:
              v = verts[panel.data.loops[loop_index].vertex_index]
              xs.append(v.co.x)
              zs.append(v.co.z)
          min_x, max_x = min(xs), max(xs)
          min_z, max_z = min(zs), max(zs)
          dx = max_x - min_x
          dz = max_z - min_z
          
          for loop_index in front_face.loop_indices:
              v = verts[panel.data.loops[loop_index].vertex_index]
              uv = uv_layer[loop_index].uv
              uv.x = (v.co.x - min_x) / dx
              uv.y = (v.co.z - min_z) / dz
          
          # === CREATE MATERIAL ===
          mat = bpy.data.materials.new(name="CanvasMaterial")
          mat.use_nodes = True
          nodes = mat.node_tree.nodes
          links = mat.node_tree.links
          
          # Clear default nodes
          for node in nodes:
              nodes.remove(node)
          
          # Add nodes
          output = nodes.new(type='ShaderNodeOutputMaterial')
          diffuse = nodes.new(type='ShaderNodeBsdfPrincipled')
          tex_image = nodes.new(type='ShaderNodeTexImage')
          tex_image.image = img
          
          # Link nodes
          links.new(tex_image.outputs['Color'], diffuse.inputs['Base Color'])
          links.new(diffuse.outputs['BSDF'], output.inputs['Surface'])
          
          # Assign material
          panel.data.materials.append(mat)
          
          # === ASSIGN PURE WHITE TO OTHER FACES ===
          white_color = (1.0, 1.0, 1.0, 1.0)
          for poly in mesh.polygons:
              if poly.index != front_face.index:
                  poly.material_index = 0
                  for loop_index in poly.loop_indices:
                      uv_layer[loop_index].uv = (0.0, 0.0)  # Collapse UVs
                  # Optional: assign white via vertex color or separate material if needed
          
          # === DONE ===
          print("✅ Canvasizer complete. Panel is upright, aspect-correct, and textured.")

          print("✅ Ready to export:", out_glb, out_usdz)
          
          # Export GLB (embedded textures)
          bpy.ops.export_scene.gltf(
              filepath=out_glb,
              export_format='GLB',
              export_image_format='AUTO',
              export_yup=True,
              export_apply=True,
              export_texcoords=True,
              export_normals=True,
              export_materials='EXPORT',
              use_selection=False
          )
          
          # Export USDZ
          bpy.ops.wm.usd_export(
              filepath=out_usdz,
              export_format='USDZ',
              export_materials=True,
              export_textures=True,
              selected_objects_only=False
          )
          PY

      - name: Run Blender headless
        env:
          ARIP_IMAGE_PATH: ${{ github.workspace }}/assets/artwork.png
          ARIP_OUT_GLB:   ${{ github.workspace }}/output/artwork.glb
          ARIP_OUT_USDZ:  ${{ github.workspace }}/output/artwork.usdz
        run: /Applications/Blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      - name: Inspect post‑Blender output
        run: |
          set -euxo pipefail
          echo "Tree after Blender:"
          find . -maxdepth 4 -type f

      - name: Normalize and stage artifacts
        run: |
          set -euxo pipefail
          mkdir -p public_models
          shopt -s nullglob nocaseglob
          files=(output/*.{glb,usdz})
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No 3D model files produced — aborting"
            exit 1
          fi
          for f in "${files[@]}"; do
            base=$(basename "$f")
            lower=$(echo "$base" | tr '[:upper:]' '[:lower:]')
            cp -v "$f" "public_models/$lower"
          done
          ls -la public_models

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: public_models/*

      - name: Commit artifacts to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public_models
          git commit -m "Add AR models for ${{ github.event.client_payload.title }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: POST back to WordPress (after HEAD check)
        env:
          WP_WEBHOOK_URL: ${{ secrets.WP_WEBHOOK_URL }}
          WP_WEBHOOK_TOKEN: ${{ secrets.WP_WEBHOOK_TOKEN }}
        run: |
          GLB_PATH="public_models/artwork.glb"
          USDZ_PATH="public_models/artwork.usdz"

          GLB_URL=""
          USDZ_URL=""

          if [ -f "$GLB_PATH" ]; then
            GLB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$GLB_PATH"
          fi
          if [ -f "$USDZ_PATH" ]; then
            USDZ_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$USDZ_PATH"
          fi

          echo "Will POST with:"
          echo "GLB: $GLB_URL"
          echo "USDZ: $USDZ_URL"

          # Wait until at least the GLB is live on GitHub's raw CDN
          # Max 30s, check every 3s
          for i in {1..10}; do
            if curl -s -I "$GLB_URL" | grep -q "200 OK"; then
              echo "✅ GLB is live"
              break
            fi
            echo "⏳ Waiting for GLB to propagate..."
            sleep 3
          done

          # Optional: also wait for USDZ if present
          if [ -n "$USDZ_URL" ]; then
            for i in {1..10}; do
              if curl -s -I "$USDZ_URL" | grep -q "200 OK"; then
                echo "✅ USDZ is live"
                break
              fi
              echo "⏳ Waiting for USDZ to propagate..."
              sleep 3
            done
          fi

          echo "POSTing to: $WP_WEBHOOK_URL"

          jq -n \
            --arg post_id  "${{ github.event.client_payload.post_id }}" \
            --arg title    "${{ github.event.client_payload.title }}" \
            --arg image    "${{ github.event.client_payload.image_url }}" \
            --arg glb      "$GLB_URL" \
            --arg usdz     "$USDZ_URL" \
            '{post_id:$post_id, title:$title, image_url:$image, glb_url:$glb, usdz_url:$usdz}' \
          | curl -v -X POST "$WP_WEBHOOK_URL" \
              -H "Authorization: Bearer $WP_WEBHOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @-
