name: Artwork to AR (GLB + USDZ)

on:
  repository_dispatch:
    types: [canvasizer_trigger]

permissions:
  contents: write # allow pushes to main

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Blender
        id: cache-blender
        uses: actions/cache@v3
        with:
          path: blender
          key: blender-macos-3.6.5

      - name: Download Blender if not cached
        if: steps.cache-blender.outputs.cache-hit != 'true'
        run: |
          mkdir -p blender
          echo "⬇️ Downloading Blender..."
          curl -L https://mirror.clarkson.edu/blender/release/Blender3.6/blender-3.6.5-macos-x64.dmg -o blender/blender.dmg
          hdiutil attach blender/blender.dmg -mountpoint /Volumes/Blender
          cp -R "/Volumes/Blender/Blender.app" blender/
          hdiutil detach /Volumes/Blender

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.client_payload.image_url }}" -o assets/artwork.png

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy, os, math

          # --- Setup ---
          img_path = os.environ["ARIP_IMAGE_PATH"]
          out_glb  = os.environ["ARIP_OUT_GLB"]
          out_usdz = os.environ["ARIP_OUT_USDZ"]

          os.makedirs(os.path.dirname(out_glb), exist_ok=True)

          # Clean scene
          bpy.ops.wm.read_factory_settings(use_empty=True)

          # --- Image and Dimensions ---
          img = bpy.data.images.load(img_path)
          img.colorspace_settings.name = "sRGB"
          aspect = (img.size[0] / img.size[1]) if img.size[1] else 1.0

          width_m = 1.50   # 1.5 M wide
          depth_m = 0.02   # 2 cm thick
          height_m = width_m / aspect

          # --- Create and Shape the Panel Object ---
          bpy.ops.mesh.primitive_plane_add(size=1.0, enter_editmode=False, location=(0, 0, 0))
          panel = bpy.context.active_object
          panel.name = "ArtPanel"

          # Solidify for thickness
          mod = panel.modifiers.new(name="Solidify", type='SOLIDIFY')
          mod.thickness = depth_m
          mod.offset = 1.0 # Push forward so back face is at z=0
          bpy.ops.object.modifier_apply(modifier=mod.name)

          # Scale to real size
          panel.scale = (width_m / 2.0, height_m / 2.0, 1.0)
          bpy.ops.object.transform_apply(scale=True)

          # Tilt upright: rotate +90° around X so face points +Y
          panel.rotation_euler[0] = math.radians(90)
          bpy.ops.object.transform_apply(rotation=True)

          # --- UV Unwrapping ---
          # This step is crucial for the texture to map correctly
          bpy.ops.object.mode_set(mode='EDIT')
          bpy.ops.mesh.select_all(action='SELECT')
          bpy.ops.uv.smart_project() # Create UVs for all faces
          bpy.ops.object.mode_set(mode='OBJECT')

          # --- Materials ---
          # Material 1: Front Artwork
          mat_front = bpy.data.materials.new("FrontArt")
          mat_front.use_nodes = True
          f_bsdf = mat_front.node_tree.nodes.get("Principled BSDF")
          f_tex = mat_front.node_tree.nodes.new("ShaderNodeTexImage")
          f_tex.image = img
          mat_front.node_tree.links.new(f_tex.outputs["Color"], f_bsdf.inputs["Base Color"])
          f_bsdf.inputs["Roughness"].default_value = 0.7

          # Material 2: Sides/Back
          mat_side = bpy.data.materials.new("SideMat")
          mat_side.use_nodes = True
          s_bsdf = mat_side.node_tree.nodes.get("Principled BSDF")
          s_bsdf.inputs["Base Color"].default_value = (0.8, 0.8, 0.8, 1.0) # Light grey
          s_bsdf.inputs["Roughness"].default_value = 0.9

          # Assign material slots
          mesh = panel.data
          mesh.materials.append(mat_front)
          mesh.materials.append(mat_side)

          # Default all faces to the side material
          for poly in mesh.polygons:
              poly.material_index = 1

          # Find the front face (now pointing in the +Y direction) and assign the art material
          front_face = max(mesh.polygons, key=lambda p: p.center.y)
          front_face.material_index = 0

          # --- Export Files ---
          print("✅ Object created. Exporting files...")

          # Export GLB
          bpy.ops.export_scene.gltf(
              filepath=out_glb,
              export_format='GLB',
              export_yup=True,
              export_apply=True,
              use_selection=False
          )
          print(f"✅ GLB exported to {out_glb}")

          # Export USDZ
          bpy.ops.wm.usd_export(
              filepath=out_usdz,
              selected_objects_only=False,
              export_textures=True,
              relative_paths=False
          )
          print(f"✅ USDZ exported to {out_usdz}")

          print("🎉 Script finished.")
          PY

      - name: Run Blender headless
        env:
          ARIP_IMAGE_PATH: ${{ github.workspace }}/assets/artwork.png
          ARIP_OUT_GLB: ${{ github.workspace }}/output/artwork.glb
          ARIP_OUT_USDZ: ${{ github.workspace }}/output/artwork.usdz
        run: blender/blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      - name: Inspect post-Blender output
        if: always() # Run this step even if Blender fails
        run: |
          echo "🌲 Tree after Blender:"
          find . -maxdepth 4 -type f

      - name: Normalize and stage artifacts
        run: |
          mkdir -p public_models
          shopt -s nullglob nocaseglob
          files=(output/*.{glb,usdz})
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No 3D model files were produced by Blender."
            exit 1
          fi
          for f in "${files[@]}"; do
            base=$(basename "$f")
            lower=$(echo "$base" | tr '[:upper:]' '[:lower:]')
            cp -v "$f" "public_models/$lower"
          done
          echo "✅ Artifacts staged:"
          ls -la public_models

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: public_models/*    

      - name: Commit artifacts to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public_models
          # Check if there's anything to commit
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Add AR models for ${{ github.event.client_payload.title }}"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          fi

      - name: POST back to WordPress
        env:
          WP_WEBHOOK_URL: ${{ secrets.WP_WEBHOOK_URL }}
          WP_WEBHOOK_TOKEN: ${{ secrets.WP_WEBHOOK_TOKEN }}
        run: |
          GLB_PATH="public_models/artwork.glb"
          USDZ_PATH="public_models/artwork.usdz"

          GLB_URL=""
          USDZ_URL=""

          if [ -f "$GLB_PATH" ]; then
            GLB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$GLB_PATH"
          fi
          if [ -f "$USDZ_PATH" ]; then
            USDZ_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$USDZ_PATH"
          fi

          # Wait up to 30s for the main artifact (GLB) to be live on GitHub's CDN
          echo "⏳ Waiting for GLB to become available at $GLB_URL..."
          for i in {1..10}; do
            if curl --output /dev/null --silent --head --fail "$GLB_URL"; then
              echo "✅ GLB is live."
              break
            fi
            sleep 3
          done

          echo "POSTing results to WordPress webhook..."
          jq -n \
            --arg post_id  "${{ github.event.client_payload.post_id }}" \
            --arg title    "${{ github.event.client_payload.title }}" \
            --arg image    "${{ github.event.client_payload.image_url }}" \
            --arg glb      "$GLB_URL" \
            --arg usdz     "$USDZ_URL" \
            '{post_id:$post_id, title:$title, image_url:$image, glb_url:$glb, usdz_url:$usdz}' \
          | curl -v -X POST "$WP_WEBHOOK_URL" \
              -H "Authorization: Bearer $WP_WEBHOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @-
