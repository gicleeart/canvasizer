name: Artwork to AR (GLB + USDZ)

on:
  repository_dispatch:
    types: [canvasizer_trigger]

permissions:
  contents: write  # allow pushes to main

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Blender
        run: brew install --cask blender

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.client_payload.image_url }}" -o assets/artwork.png

      - name: Preflight debug
        run: |
          set -euxo pipefail
          pwd
          ls -la
          echo "Tree before conversion:"
          find . -maxdepth 3 -type f

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy, os, math
          os.makedirs(os.path.dirname(os.environ["ARIP_OUT_GLB"]), exist_ok=True)
          os.makedirs(os.path.dirname(os.environ["ARIP_OUT_USDZ"]), exist_ok=True)

          # Clean scene
          bpy.ops.wm.read_factory_settings(use_empty=True)

          img_path = os.environ.get("ARIP_IMAGE_PATH")
          out_glb  = os.environ.get("ARIP_OUT_GLB")
          out_usdz = os.environ.get("ARIP_OUT_USDZ")

          width_m  = 0.30
          depth_m  = 0.03

          img = bpy.data.images.load(img_path)
          img.colorspace_settings.name = 'sRGB'

          aspect = img.size[0] / img.size[1] if img.size[1] else 1.0
          height_m = width_m / aspect

          bpy.ops.mesh.primitive_plane_add(size=1.0, enter_editmode=False)
          plane = bpy.context.active_object
          plane.name = "ArtPanel"

          plane.scale = (width_m / 2.0, height_m / 2.0, 1.0)
          bpy.ops.object.transform_apply(scale=True)

          mod = plane.modifiers.new(name="Solidify", type='SOLIDIFY')
          mod.thickness = depth_m
          mod.offset = -1.0
          bpy.ops.object.modifier_apply(modifier=mod.name)

          bpy.ops.object.editmode_toggle()
          bpy.ops.uv.smart_project(angle_limit=66, island_margin=0.02)
          bpy.ops.object.editmode_toggle()

          mat = bpy.data.materials.new(name="ArtMat")
          mat.use_nodes = True
          nt = mat.node_tree
          bsdf = nt.nodes.get("Principled BSDF")
          tex = nt.nodes.new("ShaderNodeTexImage")
          tex.image = img
          tex.interpolation = 'Smart'
          nt.links.new(tex.outputs["Color"], bsdf.inputs["Base Color"])
          bsdf.inputs["Roughness"].default_value = 0.7
          bsdf.inputs["Metallic"].default_value = 0.0
          plane.data.materials.append(mat)

          bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)

          bpy.ops.export_scene.gltf(
              filepath=out_glb,
              export_format='GLB',
              export_image_format='AUTO',
              export_yup=True,
              export_apply=True,
              export_texcoords=True,
              export_normals=True,
              export_materials='EXPORT',
              use_selection=False
          )

          bpy.ops.wm.usd_export(
              filepath=out_usdz,
              export_format='USDZ',
              export_materials=True,
              export_textures=True,
              selected_objects_only=False
          )
          PY

      - name: Run Blender headless
        env:
          ARIP_IMAGE_PATH: ${{ github.workspace }}/assets/artwork.png
          ARIP_OUT_GLB:   ${{ github.workspace }}/output/artwork.glb
          ARIP_OUT_USDZ:  ${{ github.workspace }}/output/artwork.usdz
        run: /Applications/Blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      - name: Inspect post‑Blender output
        run: |
          set -euxo pipefail
          echo "Tree after Blender:"
          find . -maxdepth 4 -type f

      - name: Normalize and stage artifacts
        run: |
          set -euxo pipefail
          mkdir -p public_models
          shopt -s nullglob nocaseglob
          files=(output/*.{glb,usdz})
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No 3D model files produced — aborting"
            exit 1
          fi
          for f in "${files[@]}"; do
            base=$(basename "$f")
            lower=$(echo "$base" | tr '[:upper:]' '[:lower:]')
            cp -v "$f" "public_models/$lower"
          done
          ls -la public_models

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: public_models/*

      - name: Commit artifacts to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public_models
          git commit -m "Add AR models for ${{ github.event.client_payload.title }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: POST back to WordPress
        env:
          WP_WEBHOOK_URL: ${{ secrets.WP_WEBHOOK_URL }}
          WP_WEBHOOK_TOKEN: ${{ secrets.WP_WEBHOOK_TOKEN }}
        run: |
          GLB_PATH="public_models/artwork.glb"
          USDZ_PATH="public_models/artwork.usdz"

          GLB_URL=""
          USDZ_URL=""

          if [ -f "$GLB_PATH" ]; then
            GLB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$GLB_PATH"
          fi
          if [ -f "$USDZ_PATH" ]; then
            USDZ_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$USDZ_PATH"
          fi

          echo "POSTing to: $WP_WEBHOOK_URL"
          echo "GLB: $GLB_URL"
          echo "USDZ: $USDZ_URL"

          jq -n \
            --arg post_id  "${{ github.event.client_payload.post_id }}" \
            --arg title    "${{ github.event.client_payload.title }}" \
            --arg image    "${{ github.event.client_payload.image_url }}" \
            --arg glb      "$GLB_URL" \
            --arg usdz     "$USDZ_URL" \
            '{post_id:$post_id, title:$title, image_url:$image, glb_url:$glb, usdz_url:$usdz}' \
          | curl -v -X POST "$WP_WEBHOOK_URL" \
              -H "Authorization: Bearer $WP_WEBHOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @-
