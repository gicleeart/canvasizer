name: Artwork to AR (GLB + USDZ)

on:
  repository_dispatch:
    types: [canvasizer_trigger]

permissions:
  contents: write  # allow pushes to main

jobs:
  build-ar:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Blender
        run: brew install --cask blender

      - name: Download artwork
        run: |
          mkdir -p assets scripts output
          curl -L "${{ github.event.client_payload.image_url }}" -o assets/artwork.png

      # 🪪 Preflight: check environment and inputs
      - name: Preflight debug
        run: |
          set -euxo pipefail
          pwd
          ls -la
          echo "Tree before conversion:"
          find . -maxdepth 3 -type f

      - name: Create Blender script
        run: |
          cat > scripts/make_ar_plane.py << 'PY'
          import bpy, os

          # Reset scene
          bpy.ops.wm.read_factory_settings(use_empty=True)

          # Add a cube
          bpy.ops.mesh.primitive_cube_add(size=1)

          # Ensure output dir exists
          out_dir = os.path.join(os.getcwd(), "output")
          os.makedirs(out_dir, exist_ok=True)

          # Export GLB
          bpy.ops.export_scene.gltf(
              filepath=os.path.join(out_dir, "artwork.glb"),
              export_format='GLB',
              export_apply=True
          )
  
          # Export USDZ (requires Blender USD export support)
          bpy.ops.wm.usd_export(
              filepath=os.path.join(out_dir, "artwork.usdz")
          )
          PY
      - name: Run Blender headless
        run: /Applications/Blender.app/Contents/MacOS/Blender -b -noaudio --python scripts/make_ar_plane.py

      # 🔍 Inspect immediately after Blender
      - name: Inspect post‑Blender output
        run: |
          set -euxo pipefail
          echo "Tree after Blender:"
          find . -maxdepth 4 -type f

      # 📦 Stage and normalize artifacts
      - name: Normalize and stage artifacts
        run: |
          set -euxo pipefail
          mkdir -p public_models
          shopt -s nullglob nocaseglob
          files=(output/*.{glb,usdz})
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No 3D model files produced — aborting"
            exit 1
          fi
          for f in "${files[@]}"; do
            base=$(basename "$f"); lower="${base,,}"
            cp -v "$f" "public_models/$lower"
          done
          ls -la public_models

      - name: Upload AR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artwork-ar
          path: public_models/*

      - name: Commit artifacts to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public_models
          git commit -m "Add AR models for ${{ github.event.client_payload.title }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: 🔔 POST back to WordPress
        env:
          WP_WEBHOOK_URL: ${{ secrets.WP_WEBHOOK_URL }}
          WP_WEBHOOK_TOKEN: ${{ secrets.WP_WEBHOOK_TOKEN }}
        run: |
          GLB_PATH="public_models/artwork.glb"
          USDZ_PATH="public_models/artwork.usdz"

          GLB_URL=""
          USDZ_URL=""

          if [ -f "$GLB_PATH" ]; then
            GLB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$GLB_PATH"
          fi
          if [ -f "$USDZ_PATH" ]; then
            USDZ_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/$USDZ_PATH"
          fi

          echo "POSTing to: $WP_WEBHOOK_URL"
          echo "GLB: $GLB_URL"
          echo "USDZ: $USDZ_URL"

          jq -n \
            --arg post_id  "${{ github.event.client_payload.post_id }}" \
            --arg title    "${{ github.event.client_payload.title }}" \
            --arg image    "${{ github.event.client_payload.image_url }}" \
            --arg glb      "$GLB_URL" \
            --arg usdz     "$USDZ_URL" \
            '{post_id:$post_id, title:$title, image_url:$image, glb_url:$glb, usdz_url:$usdz}' \
          | curl -v -X POST "$WP_WEBHOOK_URL" \
              -H "Authorization: Bearer $WP_WEBHOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @-
